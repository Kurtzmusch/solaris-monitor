#!/usr/bin/python3.6
import requests
import getpass
import json
import time
import os
import threading
from threading import Thread

apiURL = 'https://api.solaris.games'
loginURL = '/api/auth/login'
gameURL = '/api/game/'
activeGamesURL = '/api/game/list/active'
headers = {
        'Content-Type': 'application/json;charset=UTF-8',
        'Sec-Fetch-Mode': 'cors',
        'Origin': 'https://solaris.games'
}
games = []
mainLock = threading.Lock()
terminate = False
ownPlayerID = ''

def main():
    
    cookie = getCookie()
    if cookie is  None:
        cookie = login()
        if cookie is None:
            print('failed to log in')
            return
    getActiveGames(cookie)
    getGalaxyes(cookie)
    computeAttacks()
    initUpdaterThread()
    clearTerminal()
    drawMonitor()
    while(True):
        getpass.getpass('')
        with mainLock:
            command = input('command: ')
            print('')
            processCommand(command)

def getCookie():
    cookie = None
    try:
        cookieFile = open('solaris-cookie.cookie', 'r')
        cookie = cookieFile.read()
        cookieFile.close()
    except IOError:
        print('no auth cookie found, login required')
        cookieFile.close()
    finally:
        return cookie

def login():
    email = input('email: ')
    password = getpass.getpass()
    payload = '{"email": "'+email+'", "password": "'+password+'"}'
    payload = payload.encode('utf-8')

    url = apiURL+loginURL
    response = requests.post(url, data=payload, headers=headers)
    responseCookies = response.cookies.get_dict()
    if( 'connect.sid' in responseCookies ):
        authCookie = responseCookies['connect.sid']
        cookieFile = open('solaris-cookie.cookie', 'w')
        cookieFile.write( authCookie )
        cookieFile.close()
        print('connected')
        return authCookie
    else:
        return None

def getActiveGames(authCookie):
    authHeaders = headers.copy()
    authHeaders['Cookie'] = 'connect.sid='+authCookie
    url = apiURL+activeGamesURL
    response = requests.get(url, headers=authHeaders)
    if response.status_code != 200:
        print('failed, try reseting the cookie')
        exit()
    responseOBJ = json.loads(response.text)
    for responseGame in responseOBJ:
        game = {}
        game['name'] = responseGame['settings']['general']['name']
        game['id'] = responseGame['_id']
        game['tracking'] = True
        game['enemy-carriers'] = []
        game['owned-stars'] = []
        game['attacks'] = 0
        games.append(game)

def getGalaxyes(authCookie):
    for game in games:
        getGalaxy(game['id'], authCookie, game)

def getGalaxy(gameID, authCookie, game):
    authHeaders = headers.copy()
    authHeaders['Cookie'] = 'connect.sid='+authCookie
    url = apiURL+gameURL+gameID+'/galaxy'
    print(url)
    response = requests.get(url, headers=authHeaders)
    if response.status_code != 200:
        print('failed, try reseting the cookie')
        exit()
    responseOBJ = json.loads(response.text)
    found = False
    for player in responseOBJ['galaxy']['players']:
        if( 'userId' in player ):
            ownPlayerID = player['_id']
            print(player['alias'])
            break

    for carrier in responseOBJ['galaxy']['carriers']:
        if carrier['ownedByPlayerId'] != ownPlayerID:
            game['enemy-carriers'].append(carrier)

    for star in responseOBJ['galaxy']['stars']:
        if( star['ownedByPlayerId'] == ownPlayerID ):
            game['owned-stars'].append(star['_id'])

def printGames():
    printGamesHeader()
    index = 0
    for game in games:
        print( str(index) + ' - '+game['name'] .ljust(64-14,' ')+str(game['attacks']) )
        index += 1

def printGamesHeader():
    rows, columns = os.popen('stty size', 'r').read().split()
    idString = 'id   '
    nameString = 'name                                                 '
    totalString = 'total   '
    newString = 'new'
    print(idString+nameString+totalString+newString)

def printEmptyLines(lineCount):
    for i in range(0,lineCount):
        print()

def clearTerminal():
    rows, columns = os.popen('stty size', 'r').read().split()
    printEmptyLines(int(rows))

def drawMonitor():
    rows, columns = os.popen('stty size', 'r').read().split()
    lineCount = int(rows)-len(games)-3
    printGames()
    printEmptyLines(lineCount)

def processCommand(commandString):
    for commandName, commandFunction in commands.items():
        if(commandString == commandName):
            commandFunction()
            return
    drawMonitor()

def computeAttacks():
    for game in games:
        for carrier in game['enemy-carriers']:
            if 'waypoints' in carrier:
                for starID in game['owned-stars']:
                    if len(carrier['waypoints'])>0:
                        if carrier['waypoints'][0]['destination'] == starID:
                            game['attacks']+=1
        print(game['attacks'])

def updateLoop():
    global terminate
    while(not terminate):
        time.sleep(1.0)
        with mainLock:
            drawMonitor()

def initUpdaterThread():
    updaterThread = Thread(target=updateLoop)
    updaterThread.start()

def quit():
    global terminate
    terminate = True
    exit()

commands = {
        'quit': quit
}

main()
